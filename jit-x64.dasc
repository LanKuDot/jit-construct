#include <stdint.h>
#include "util.h"

|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state
#define MAX_NESTING 256

int main(int argc, char *argv[])
{
	if (argc < 2) err("Usage: jit-x64 <inputfile>");
	dasm_State *state;
	initjit(&state, actions);

	unsigned int maxpc = 0;
	int pcstack[MAX_NESTING];
	int *top = pcstack, *limit = pcstack + MAX_NESTING, redundant;

	// Function prologue.
	|  push PTR
	|  mov  PTR, rdi      // rdi store 1st argument

	for (char *p = read_file(argv[1]); *p; p++) {
		switch (*p) {
		case '>':
			redundant = 0;
			do { ++redundant; } while( *(++p) == '>' );
			--p;
			|  add  PTR, redundant
			break;
		case '<':
			redundant = 0;
			do { ++redundant; } while( *(++p) == '<' );
			--p;
			|  sub  PTR, redundant
			break;
		case '+':
			redundant = 0;
			do { ++redundant; } while( *(++p) == '+' );
			--p;
			|  add  byte [PTR], redundant
			break;
		case '-':
			redundant = 0;
			do { ++redundant; } while( *(++p) == '-' );
			--p;
			|  sub  byte [PTR], redundant
			break;
		case '.':
			|  movzx edi, byte [PTR]
			|  callp putchar
			break;
		case ',':
			|  callp getchar
			|  mov   byte [PTR], al
			break;
		case '[':
			// Detect clear loop
			if ( *(p+2) == ']' && *(p+1) == '-' ) {
				|  mov  byte [PTR], 0
				p += 2;
				break;
			}

			// Detect multiply and copy loop
			// Expected format:
			// [ - {continuous '>' or '<'} {continuous +} {continuous '>' or '<'} {continuous +} {continuous '>' or '<'} ]
			if ( *(p+1) == '-' ) {
				int dst = 0, dst_1 = 0, dst_2 = 0, mul_1 = 0, mul_2 = 0, loop_end = 2;

				// Count the distance of the first destination
				if ( *(p+loop_end) == '>' ) {
					while ( *(p+loop_end) == '>' ) {
						++loop_end; ++dst;
					}
				} else {
					while ( *(p+loop_end) == '<' ) {
						++loop_end; --dst;
					}
				}
				dst_1 = dst;

				// Count mul_1
				while ( *(p+loop_end) == '+' ) {
					++loop_end; ++mul_1;
				}

				// Count the second one
				if ( *(p+loop_end) == '>' ) {
					while ( *(p+loop_end) == '>' ) {
						++loop_end; ++dst;
					}
				} else {
					while ( *(p+loop_end) == '<' ) {
						++loop_end; --dst;
					}
				}
				dst_2 = dst;

				// Count mul_2
				while( *(p+loop_end) == '+' ) {
					++loop_end; ++mul_2;
				}

				// Count the distance move back to original one
				if ( *(p+loop_end) == '>' ) {
					while ( *(p+loop_end) == '>' ) {
						++loop_end; ++dst;
					}
				} else {
					while ( *(p+loop_end) == '<' ) {
						++loop_end; --dst;
					}
				}

				if ( dst == 0 && *(p+loop_end) == ']' ) {
					p += loop_end;
					| push  r8
					| push  r9 

					| movzx r8, byte [PTR]
					| imul  r8, mul_1
					| mov   r9, PTR
					| add   r9, dst_1
					| add   byte [r9], r8b

					| movzx r8, byte [PTR]
					| imul  r8, mul_2
					| mov   r9, PTR
					| add   r9, dst_2
					| add   byte [r9], r8b

					| mov   byte [PTR], 0

					| pop   r9
					| pop   r8
					break;
				}
			}

			if (top == limit) err("Nesting too deep.");
			// Each loop gets two pclabels: at the beginning and end.
			// We store pclabel offsets in a stack to link the loop
			// begin and end together.
			maxpc += 2;
			*top++ = maxpc;
			dasm_growpc(&state, maxpc);
			|  cmp  byte [PTR], 0
			|  je   =>(maxpc-2)
			|=>(maxpc-1):
			break;
		case ']':
			if (top == pcstack) err("Unmatched ']'");
			top--;
			|  cmp  byte [PTR], 0
			|  jne  =>(*top-1)
			|=>(*top-2):
			break;
		}
	}

	// Function epilogue.
	|  pop  PTR
	|  ret

	void (*fptr)(char*) = jitcode(&state);
	char *mem = calloc(30000, 1);
	fptr(mem);
	free(mem);
	free_jitcode(fptr);
	return 0;
}
